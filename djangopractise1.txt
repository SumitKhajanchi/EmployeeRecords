-> python -m venv myvenv ->> Creates virtual env
-> myvenv\Scripts\activate ->> Activate your virtual env
-> python -m pip install --upgrade pip ->> Install pip
-> pip install django ->> Installs Django
-> django-admin.exe startproject mysite . ->> It creates manage.py and a folder for project as mysite
-> Set time zone to your country in settings.py - Ex - Asia/Kolkata
-> Add static file path in settings.py ->> STATIC_ROOT = os.path.join(BASE_DIR, 'static')
-> Add Allowed Hosts in settings.py to match our hostname ->> ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
-> To create database run this command ->> python manage.py migrate
-> Start the server ->> python manage.py runserver
-> We will create a app called EmployeeRecord ->> python manage.py startapp EmployeeRecord
-> After creating app 'EmployeeRecord', we need to add it to mysite/settings.py file below INSTALLED_APPS.So that it can be used.
-> To create a blog in the EmployeeRecord/models.py file we define all objects called Models â€“ this is a place in which we will define our content of blog like  datatype etc . Model is
   object in django that is saved in DB.
	from django.db import models
	from django.utils import timezone
	class Post(models.Model):
		employee_id = models.CharField(max_length=10)
		name = models.CharField(max_length=50)
		age = models.IntegerField()
		gender = models.CharField(max_length=6)
		experience = models.TextField()
		joining_date = models.DateTimeField() #DateField for accepting only date and not time.
		def __str__(self):
			return self.name 	#This line is used to show employee id in place of random string object in admin console.
		#Also tried with return self.name, self.employee_id -> but it throwed error on clicking post in admin console. As we are returning a tuple of two from __str__
-> Now to add the contents we created in models like the data type in DB, we need to run ->> python manage.py makemigrations EmployeeRecord
-> It creates a migration file that we need to apply to our database using command ->> python manage.py migrate EmployeeRecord ->> It applies all the migrations.
-> Now to make our model visible on the admin page, we need to register the model by adding below line in EmployeeRecord/admin.py file.
   from django.contrib import admin
   from .models import Post
   admin.site.register(Post)
-> Now we create a super user for our admin account. It has access to everything on site. For this execute ->> python manage.py createsuperuser
   Username (leave blank to use '983469'): admin
   Email address: admin@gmail.com
   Password: sumit@24
-> Now go to admin console and add some sample employee details to it.
-> We will now publish our content over internet in pythonanywhere.com and keep our code in github
-> Execute below commands in your root folder : i.e djangopractise1 for me.
   git init
   git config --global user.name "SumitKhajanchi"
   git config --global user.email khajanchi.sumit24@gmail.com
-> Initializing the git repository is something we need to do only once per project (and you won't have to re-enter the username and email ever again).
-> If we dont want any file to be uploaded to Github, create a file .gitignore in djangopractise1 folder and add the file names in seperate lines.
-> To add all changes done to queue ->> git add --all
-> To save the changes in our computer git repository execute ->> git commit -m "EmployeeRecord app".
-> Create a new repository in github.com -> https://github.com/SumitKhajanchi/EmployeeRecords.git 	# Repository name is EmployeeRecords
-> git remote add origin https://github.com/SumitKhajanchi/EmployeeRecords.git
-> git push -u origin master # It push all your changes from local repository to github repository
-> To set our blog in pythonanywhere.com, create a begineer account in it. And generate an API token when new to it.
-> Now open bash console in pythonanywhere.com. To Deploy code on pythonanywhere we need to pull code frmo GitHub and then configure pythonanywhere to recognise it and start serving it as
   web application. Pythonanywhere provides helper tool for this.
-> In PA(pythonanywhere) bash console execute ->> pip3.6 install --user pythonanywhere
-> Now we run the helper to automatically configure our app from GitHub in PA bash console using command ->> pa_autoconfigure_django.py https://github.com/SumitKhajanchi/EmployeeRecords.git
-> 
